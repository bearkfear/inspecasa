{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logout = logout;\nexports.loginFacebook = loginFacebook;\nexports.loginGoogle = loginGoogle;\nexports.loginEmail = loginEmail;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _firebase = _interopRequireDefault(require(\"firebase\"));\n\nrequire(\"firebase/auth\");\n\nvar authentication = _firebase.default.auth;\n\nfunction handleResponse(response) {\n  var uid, token;\n  return _regenerator.default.async(function handleResponse$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          uid = response.user.uid;\n          _context.next = 4;\n          return _regenerator.default.awrap(response.user.getIdToken());\n\n        case 4:\n          token = _context.sent;\n          return _context.abrupt(\"return\", {\n            uid: uid,\n            token: token\n          });\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          throw new Error(_context.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction logout() {\n  return _regenerator.default.async(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          authentication().signOut();\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction loginFacebook() {\n  return _regenerator.default.async(function loginFacebook$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction loginGoogle() {\n  var googleCredential, response;\n  return _regenerator.default.async(function loginGoogle$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          googleCredential = new authentication.GoogleAuthProvider();\n          _context4.next = 4;\n          return _regenerator.default.awrap(authentication().signInWithPopup(googleCredential));\n\n        case 4:\n          response = _context4.sent;\n          _context4.next = 7;\n          return _regenerator.default.awrap(handleResponse(response));\n\n        case 7:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          throw new Error(_context4.t0.message);\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}\n\nfunction loginEmail(email, password) {\n  var response;\n  return _regenerator.default.async(function loginEmail$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regenerator.default.awrap(authentication().signInWithEmailAndPassword(email, password));\n\n        case 3:\n          response = _context5.sent;\n          return _context5.abrupt(\"return\", handleResponse(response));\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          throw new Error(_context5.t0.message);\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}","map":{"version":3,"sources":["/Users/enrico/Work/iscas/inspecasa/mobile/src/configs/fire/auth.ts"],"names":["authentication","firebase","auth","handleResponse","response","uid","user","getIdToken","token","Error","message","logout","signOut","loginFacebook","loginGoogle","googleCredential","GoogleAuthProvider","signInWithPopup","loginEmail","email","password","signInWithEmailAndPassword"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA,IAAMA,cAAc,GAAGC,kBAASC,IAAhC;;AAOA,SAAeC,cAAf,CAA8BC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIUC,UAAAA,GAJV,GAIgBD,QAAQ,CAACE,IAAT,CAAcD,GAJ9B;AAAA;AAAA,4CAKwBD,QAAQ,CAACE,IAAT,CAAcC,UAAd,EALxB;;AAAA;AAKUC,UAAAA,KALV;AAAA,2CAMW;AACLH,YAAAA,GAAG,EAAHA,GADK;AAELG,YAAAA,KAAK,EAALA;AAFK,WANX;;AAAA;AAAA;AAAA;AAAA,gBAWU,IAAIC,KAAJ,CAAU,YAAEC,OAAZ,CAXV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcO,SAAeC,MAAf;AAAA;AAAA;AAAA;AAAA;AACLX,UAAAA,cAAc,GAAGY,OAAjB;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAeC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA,SAAeC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEGC,UAAAA,gBAFH,GAEsB,IAAIf,cAAc,CAACgB,kBAAnB,EAFtB;AAAA;AAAA,4CAGoBhB,cAAc,GAAGiB,eAAjB,CAAiCF,gBAAjC,CAHpB;;AAAA;AAGGX,UAAAA,QAHH;AAAA;AAAA,4CAIUD,cAAc,CAACC,QAAD,CAJxB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gBAMG,IAAIK,KAAJ,CAAU,aAAEC,OAAZ,CANH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAeQ,UAAf,CAA0BC,KAA1B,EAAyCC,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAEoBpB,cAAc,GAAGqB,0BAAjB,CACrBF,KADqB,EAErBC,QAFqB,CAFpB;;AAAA;AAEGhB,UAAAA,QAFH;AAAA,4CAMID,cAAc,CAACC,QAAD,CANlB;;AAAA;AAAA;AAAA;AAAA,gBAQG,IAAIK,KAAJ,CAAU,aAAEC,OAAZ,CARH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import firebase from \"firebase\";\nimport \"firebase/auth\";\nconst authentication = firebase.auth;\n\ninterface IHandleResponse {\n  uid: string;\n  token: string;\n}\n\nasync function handleResponse(response: firebase.auth.UserCredential): Promise<IHandleResponse> {\n\n\n  try {\n    const uid = response.user.uid;\n    const token = await response.user.getIdToken();\n    return {\n      uid,\n      token\n    };\n  } catch (e) {\n    throw new Error(e.message);\n  }\n}\nexport async function logout() {\n  authentication().signOut();\n}\nexport async function loginFacebook() { }\nexport async function loginGoogle() {\n  try {\n    const googleCredential = new authentication.GoogleAuthProvider();\n    const response = await authentication().signInWithPopup(googleCredential);\n    return await handleResponse(response);\n  } catch (e) {\n    throw new Error(e.message);\n  }\n}\n\nexport async function loginEmail(email: string, password: string) {\n  try {\n    const response = await authentication().signInWithEmailAndPassword(\n      email,\n      password\n    );\n    return handleResponse(response);\n  } catch (e) {\n    throw new Error(e.message);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}