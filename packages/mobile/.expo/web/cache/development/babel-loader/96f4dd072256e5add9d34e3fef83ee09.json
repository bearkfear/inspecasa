{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"authStore\", {\n  enumerable: true,\n  get: function get() {\n    return _authStore.authStore;\n  }\n});\nObject.defineProperty(exports, \"StoreProvider\", {\n  enumerable: true,\n  get: function get() {\n    return _Provider.StoreProvider;\n  }\n});\nexports.default = void 0;\n\nvar _mobxPersist = require(\"mobx-persist\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-community/async-storage\"));\n\nvar _schema = require(\"./schema\");\n\nvar _authStore = require(\"./authStore\");\n\nvar _context = require(\"./context\");\n\nvar _Provider = require(\"./Provider\");\n\nvar hydrate = (0, _mobxPersist.create)({\n  storage: _asyncStorage.default\n});\n(0, _mobxPersist.persist)(_schema.schema)(_authStore.authStore);\nhydrate('authStore', _authStore.authStore).then(function (state) {\n  if (state) {\n    console.log('Reidratado!');\n  }\n});\nvar _default = _context.StoreContext;\nexports.default = _default;","map":{"version":3,"sources":["/Users/enrico/Work/iscas/inspecasa/mobile/src/store/index.tsx"],"names":["hydrate","storage","AsyncStorage","schema","authStore","then","state","console","log","StoreContext"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA,IAAMA,OAAO,GAAG,yBAAO;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAP,CAAhB;AACA,0BAAQC,cAAR,EAAgBC,oBAAhB;AACAJ,OAAO,CAAC,WAAD,EAAcI,oBAAd,CAAP,CAAgCC,IAAhC,CAAqC,UAAAC,KAAK,EAAI;AAC5C,MAAIA,KAAJ,EAAW;AAETC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD;AAEF,CAND;eAQeC,qB","sourcesContent":["import { create, persist } from 'mobx-persist'\nimport AsyncStorage from '@react-native-community/async-storage'\nimport { schema } from './schema'\nimport { authStore } from './authStore'\nimport { StoreContext } from './context'\nexport { StoreProvider } from './Provider'\nexport { authStore } from './authStore'\n\nconst hydrate = create({ storage: AsyncStorage })\npersist(schema)(authStore)\nhydrate('authStore', authStore).then(state => {\n  if (state) {\n    // console.log(state)\n    console.log('Reidratado!')\n  }\n  // TODO: Verificar se a auth token ainda Ã© valida, caso nao, reautenticar\n})\n\nexport default StoreContext\n"]},"metadata":{},"sourceType":"script"}